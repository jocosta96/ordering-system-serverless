name: "Terraform"

on:
  push:
    branches:
      - main
    paths:
      - '*.tf'
      - '*.tfvars'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
    paths:
      - '*.tf'
      - '*.tfvars'
      - '.github/workflows/terraform.yml'

env:
  TF_VERSION: "1.12.2"

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      actions: read
      id-token: write
    
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-duration-seconds: 3600

      - name: Verify AWS Credentials
        run: |
          echo "Testing AWS credentials..."
          aws sts get-caller-identity
          echo "AWS credentials are valid!"

      - name: Debug Terraform Variables
        run: |
          echo "=== All TF_VAR Environment Variables ==="
          env | grep TF_VAR | sort || echo "‚ùå No TF_VAR variables found!"
          echo ""
          if [ -z "$TF_VAR_BACKEND_S3_BUCKET_NAME" ]; then
            echo "‚ùå BACKEND_S3_BUCKET_NAME is not set!"
            echo "   Go to repository Settings > Secrets and variables > Actions > Variables"
            echo "   Add: TF_VAR_BACKEND_S3_BUCKET_NAME = your-bucket-name"
          else
            echo "‚úÖ BACKEND_S3_BUCKET_NAME is set"
          fi



      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Clean Terraform Cache
        run: |
          echo "Cleaning Terraform cache and provider state..."
          rm -rf .terraform
          rm -f .terraform.lock.hcl
          # Clean global Terraform plugin cache
          rm -rf ~/.terraform.d/plugin-cache
          # Clean any remaining provider state
          find . -name "*.tfstate*" -not -path "./.terraform/*" -delete || true
          # Clean any cached provider binaries
          find /tmp -name "*terraform*" -type d -exec rm -rf {} + 2>/dev/null || true
          echo "Complete cache cleanup finished"

      - name: Terraform Init
        run: |
          echo "Initializing Terraform with forced provider download..."
          terraform init -upgrade -reconfigure
          echo "Verifying provider installation..."
          terraform providers
          echo "Verifying backend configuration..."
          terraform workspace show
          echo "Provider lock file contents:"
          cat .terraform.lock.hcl
          echo "Terraform initialized successfully"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan üìù
            \`\`\`\n
            ${process.env.PLAN || 'No changes. Infrastructure is up-to-date.'}
            \`\`\`
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Verify Main Branch
        if: github.event_name == 'push'
        run: |
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "‚ùå CRITICAL ERROR: Apply attempted on non-main branch!"
            echo "Current branch: ${{ github.ref_name }}"
            echo "Apply is ONLY allowed on main branch after code review"
            exit 1
          fi
          echo "‚úÖ Verified: Running on main branch"

      - name: Terraform Apply (Main Branch Only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üöÄ Applying Terraform changes on main branch"
          echo "Branch: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          terraform apply -auto-approve 